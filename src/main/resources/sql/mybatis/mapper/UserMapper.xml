<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.tus.wndflwr.repository.UserMapper">

	<insert id="createTableUser">
		CREATE TABLE IF NOT EXISTS tus_user (
			username VARCHAR(255) PRIMARY KEY
			, password VARCHAR(255)
			, email VARCHAR(255)
			, reg_date TIMESTAMP
			, mod_date TIMESTAMP
			, last_login TIMESTAMP
			, account_non_expired BOOLEAN
			, account_non_locked BOOLEAN
			, credentials_non_expired BOOLEAN
			, enabled BOOLEAN
		);
		CREATE INDEX IF NOT EXISTS idx_user_email ON tus_user (email);
	</insert>

	<insert id="createTableUserAuthority">
		CREATE TABLE IF NOT EXISTS tus_user_authority (
			username VARCHAR(255)
			, authority VARCHAR(255)
		);
		CREATE INDEX IF NOT EXISTS idx_user_authority_username ON tus_user_authority (username);
		CREATE INDEX IF NOT EXISTS idx_user_authority_authority ON tus_user_authority (authority);
	</insert>

	<insert id="createTableUserIp">
		CREATE TABLE IF NOT EXISTS tus_user_ip (
			username VARCHAR(255)
			, type VARCHAR(4)
			, ip VARCHAR(100)
		);
		CREATE INDEX IF NOT EXISTS idx_user_ip_username ON tus_user_ip (username);
		CREATE INDEX IF NOT EXISTS idx_user_ip_type ON tus_user_ip (type);
		CREATE INDEX IF NOT EXISTS idx_user_ip_ip ON tus_user_ip (ip);
	</insert>

	<select id="selectUserByUsername" resultType="User">
		SELECT
			username
			, password
			, email
			, mod_date modDate
			, reg_date regDate
			, last_login lastLogin
			, account_non_expired accountNonExpired
			, account_non_locked accountNonLocked
			, credentials_non_expired credentialsNonExpired
			, enabled
		FROM
			tus_user
		WHERE
			username = #{username}
	</select>

	<select id="selectUsers" resultType="User" parameterType="UserSearch">
		SELECT
			user.username
			, user.email
			, user.mod_date modDate
			, user.reg_date regDate
			, user.last_login lastLogin
			, user.account_non_expired accountNonExpired
			, user.account_non_locked accountNonLocked
			, user.credentials_non_expired credentialsNonExpired
			, user.enabled
		FROM
			tus_user user
			, tus_user_ip ip
			, tus_user_authority authority
		WHERE
			user.username = ip.username
			AND user.username = authority.username
			<if test="username != null">
				AND user.username = #{username}
			</if>
			<if test="email != null">
				AND user.email = #{email}
			</if>
			<if test="ip != null">
				AND ip.ip = #{ip}
			</if>
			<if test="authority != null">
				AND authority.authority = #{authority}
			</if>
			<if test="accountNonExpired != null">
				AND user.account_non_expired = #{accountNonExpired}
			</if>
			<if test="accountNonLocked != null">
				AND user.account_non_locked = #{accountNonLocked}
			</if>
			<if test="credentialsNonExpired != null">
				AND user.credentials_non_expired = #{credentialsNonExpired}
			</if>
			<if test="enabled != null">
				AND user.enabled = #{enabled}
			</if>
		GROUP BY
			user.username
			, user.email
			, user.mod_date
			, user.reg_date
			, user.last_login
			, user.account_non_expired
			, user.account_non_locked
			, user.credentials_non_expired
			, user.enabled
	</select>

	<insert id="insertUser" parameterType="User">
		INSERT INTO tus_user (
			username
			, password
			, email
			, mod_date
			, reg_date
			, last_login
			, account_non_expired
			, account_non_locked
			, credentials_non_expired
			, enabled
		) VALUES (
			#{username}
			, #{password}
			, #{email}
			, SYSDATE
			, SYSDATE
			, SYSDATE
			, true
			, true
			, true
			, true
		)
	</insert>

	<update id="updateUser" parameterMap="User">
		UPDATE tus_user
		SET
			email = #{email}
			, mod_date = CURRENT_DATE()
		WHERE
			username = #{username}
	</update>

	<update id="updateUser" parameterType="User">
		UPDATE tus_user
		SET
			<if test="password != null">
				password = #{password}
			</if>
			<if test="email != null">
				, email = #{email}
			</if>
			,
		WHERE
			username = #{username}
	</update>

	<select id="selectUserAuthorityByUserName" resultType="Authority">
		SELECT
			username
			, authority
		FROM
			tus_user_authority
		WHERE
			username = #{username}
	</select>

	<insert id="insertUserAuthority" parameterType="Authority">
		INSERT INTO tus_user_authority (
			username
			, authority
		) VALUES (
			#{username}
			, #{authority}
		)
	</insert>

	<delete id="deleteUserAuthorityByUsername" parameterType="String">
		DELETE FROM tus_user_authority
		WHERE
			username = #{username}
	</delete>

	<select id="selectUserIpByUsername" resultType="Ip">
		SELECT
			username
			, ip
			, type
		FROM
			tus_user_ip
		WHERE
			username = #{username}
	</select>

	<insert id="insertUserIp" parameterType="Ip">
		INSERT INTO tus_user_ip (
			username
			, ip
			, type
		) VALUES (
			#{username}
			, #{ip}
			, #{type}
		)
	</insert>

	<delete id="deleteUserIpByUsername" parameterType="String">
		DELETE FROM tus_user_ip
		WHERE
			username = #{username}
	</delete>

</mapper>
